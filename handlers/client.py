from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from keyboards import client_kb
from config import bot
from database import bot_db
from prosto_parser import animekisa



async def hello(message: types.Message):
    await bot.send_message(message.chat.id,
                           f"Hello {message.from_user.first_name}",
                           reply_markup=client_kb.start_markup)


async def help(message: types.Message):
    await message.reply("1. –ö–æ–º–∞–Ω–¥–∞ /quiz –í—ã–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–¥—É –≤–æ–ø—Ä–æ—Å–æ–∞ –ø–æ pyhton\n"
                        "2.–ö–æ–º–∞–Ω–¥–∞ /joke —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —à—É—Ç–∫–∞ –æ–Ω –Ω–µ—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç\n"
                        "3.–ö–æ–º–∞–Ω–¥–∞ /info –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
                        "4.–ö–æ–º–∞–Ω–¥–∞ /start –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "5.–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–∞\n"
                        "5.–ö–æ–º–∞–Ω–¥–∞ /vetka –≤—ã–≤–æ–¥–∏—Ç –≤–µ—Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                        "6.–ö–æ–º–∞–Ω–¥–∞ /register_user —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "7. –ö–æ–º–∞–Ω–¥–∞ /tvshow –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–º–ª—å–º–æ–≤"  
                        "Note:–ë–æ—Ç-–ê–¥–º–∏–Ω –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –æ–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

async def info(message:types.message):
    await bot.send_message(message.chat.id,
                           f'–≠—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç –ê—Ä–∑–∏–µ–≤ –¢–µ–º–∏—Ä–ª–∞–Ω\n'
                           f'bot version 1.0')

async def joke(message:types.message):
    await message.reply('–¢–µ–±—è –Ω–∞–¥—É–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç ü§£ü§£ü§£ü§£')







async def quiz_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call_1 = InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
                                         callback_data="button_call_1")
    markup.add(button_call_1)
    question = "–ö—Ç–æ —Å–æ–∑–¥–∞–ª pyhton?"
    answers = [
        "–ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º",
        "–ú–∏–∫–∏–ª—è–Ω–∂–µ–ª–æ",
        "–°—Ç–∏–≤ –ñ–æ–±—Å",
        "–í–æ—Ä–µ–Ω –ë–∞—Ñ–µ—Ç",
        "–ß–∏–Ω –ö–∞–Ω",
        "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=0,
        explanation="–≠—Ç–æ –±—ã–ª –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º",
        explanation_parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=markup,
    )


async def vetka_quiz_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call_5 = InlineKeyboardButton("–•–æ—Ä–æ—à–æ",
                                         callback_data="button_call_5")
    button_call_6 = InlineKeyboardButton("–ü–ª–æ—Ö–æ",
                                         callback_data="button_call_6")
    markup.add(button_call_5,button_call_6)
    await bot.send_message(message.chat.id, '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?',
                        reply_markup=markup)


async def get_all_tvshow(message: types.Message):
    await bot_db.sql_select(message)

async def get_all_users(message: types.Message):
    await bot_db.user_select(message)


async def parser_anime(message:types.Message):
    data = animekisa.scrapy_script()
    for i in data:
        await bot.send_message(message.chat.id, i)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(hello,commands=['start'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(info, commands=['info'])
    dp.register_message_handler(joke, commands=['joke'])
    dp.register_message_handler(vetka_quiz_1, commands=['vetka'])
    dp.register_message_handler(quiz_1, commands=['quiz'])
    dp.register_message_handler(get_all_tvshow, commands=['tvshow'])
    dp.register_message_handler(get_all_users, commands=['users'])
    dp.register_message_handler(parser_anime, commands=['skrapy'])
